# Deployment Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: frontend
        image: aksregistrykr.azurecr.io/frontend:v1 # private
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 150m
            memory: 256Mi
          limits:
            cpu: 250m
            memory: 512Mi
        ports:
        - name: http
          containerPort: 80 
        volumeMounts:
        - name: claimvolumessd
          mountPath: "/mnt/volumeMountSsd"
      volumes:
      - name: claimvolumessd
        persistentVolumeClaim:
          claimName: frontend-pvc
---
# Loadbalancer
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  type: LoadBalancer
  ports:
    - port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: frontend
---
# Deployment test MultiContainerPod
apiVersion: v1
kind: Pod
metadata:
  name: multi-pod
spec:

  restartPolicy: Never
  containers:

  - name: frontendpod
    image: aksregistrykr.azurecr.io/frontend:v1

  - name: backendpod
    image: akaino/backend:v3


---
# Create a StorageClass object pointing to the existing Storage Account
# Remember: that the Storage account must be in the same Resource Group where the AKS cluster is deployed
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: azurefile
provisioner: kubernetes.io/azure-file
mountOptions:
  - dir_mode=0777
  - file_mode=0777
parameters:
  storageAccount: devworkshopstor
  location: northeurope

---
# Create a Secret to hold the name and key of the Storage Account
# Remember: values are base64 encoded
apiVersion: v1
kind: Secret
metadata:
  name: azurefile-secret
type: Opaque
data:
  azurestorageaccountname: ZGV2d29ya3Nob3BzdG9yZQ==
  azurestorageaccountkey: SG1rY2ZvWEdQb2pQdW9VOW82eERkR0dFaWY2M25udzRwNDM5cWYvb0dJNHo3b2dVMFJJYjZjSGUyU2lhTWdCK2RSamQ5RitYa3lGeUNKa1JXR3lFSEE9PQ==

---
# Create a persistent volume, with the corresponding StorageClass and the reference to the Azure File secret.
# Remember: Create the share in the storage account otherwise the pods will fail with a "No such file or directory"
apiVersion: v1
kind: PersistentVolume
metadata:
  name: frontend-pvc
spec:
  capacity:
    storage: 2Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: azurefile
  azureFile:
    secretName: azurefile-secret
    shareName: aksshare
    readOnly: false
  mountOptions:
  - dir_mode=0777
  - file_mode=0777
  - uid=1000
  - gid=1000

---
# Create a PersistentVolumeClaim referencing the StorageClass and the volume
# Remember: this is a static scenario. The volume was created in the previous step.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: frontend-pvc
spec:
  accessModes:
    - ReadWriteOnce  
  resources:
    requests:
      storage: 2Gi
  storageClassName: azurefile
  volumeName: frontend-pvc
